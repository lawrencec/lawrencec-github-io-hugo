<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Just another Nodetraveller</title><link>http://blog.nodetraveller.com/tags/Javascript/</link><description>Recent content in Javascript on Just another Nodetraveller</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Copyright 2007-{year} Lawrence Carvalho. All rights reserved.</copyright><lastBuildDate>Sun, 07 Oct 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.nodetraveller.com/tags/Javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>My javascript testing toolchain</title><link>http://blog.nodetraveller.com/post/source/My-javascript-testing-toolchain/</link><pubDate>Sun, 07 Oct 2012 00:00:00 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/My-javascript-testing-toolchain/</guid><description>Update (Jan 4th 2014): Since I wrote this post, I&amp;rsquo;ve switched to using Karma instead of testem. Karma is written and supported by the Angular guys and in the year or so since this post was originally written has matured more than testem. I have a karma skeleton project that I use to setup my frontend testing environment. The readme for that project is pretty extensive and outlines how to set up a karma project.</description></item><item><title>Creating js files with Rhino (from JSON)</title><link>http://blog.nodetraveller.com/post/source/creating-js-files-with-rhino-from-json/</link><pubDate>Tue, 13 Nov 2007 23:41:59 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/creating-js-files-with-rhino-from-json/</guid><description>(This is primarily a note to myself)
I&amp;rsquo;ve been playing with Rhino. Specifically, reading in json objects, turning that into normal, runnable objects and saving that to a file so browsers can run it. More specifically, the code that transforms the JSON to an object in the browser should be exactly the same as the one that runs in Rhino. That way I don&amp;rsquo;t have to maintain two different versions.</description></item><item><title>ActsAsUndoable</title><link>http://blog.nodetraveller.com/post/source/actasundo/</link><pubDate>Wed, 18 Jul 2007 09:04:36 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/actasundo/</guid><description>With web apps becoming more and more like Desktop apps, it seems like user interfaces need be more like desktop user interfaces too. Some of these web apps can have a complex UI and their users need to be able to feel comfortable with it. Of course, making the UI as simple as possible is key, but if a task is relatively complex then the UI will also be relatively complex.</description></item><item><title>Another Tabbed Interface</title><link>http://blog.nodetraveller.com/post/source/another-tabbed-interface/</link><pubDate>Tue, 15 May 2007 21:15:27 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/another-tabbed-interface/</guid><description>This is a rather belated post and is sort of a continuation of my last post about Aspect Oriented Programming. I&amp;rsquo;ve made yet another tabbed interface widgety thing (like the &amp;lsquo;tubes needs another one) that uses AOP to add additonal features. A tabbed interface widget provided a nice problem for me to experiment with AOP. You can see the results which allows tabs in a widget to be draggable and closeable too.</description></item><item><title>JS Fun</title><link>http://blog.nodetraveller.com/post/source/js-fun/</link><pubDate>Sun, 25 Mar 2007 20:01:17 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/js-fun/</guid><description>For the last few months I&amp;rsquo;ve been playing around with different design patterns and methodologies in Javascript. I&amp;rsquo;ve been looking at the Composite pattern and also Aspects Oriented Programming (AOP).
AOP is a way of changing the behaviour of existing code without modifying it. It does this by providing, what AOP calls, advice at certain join points. In plain english, it provides a way of adding additional behaviour (advice) at certain points in your program (join points).</description></item><item><title>Another LiveInfo fix</title><link>http://blog.nodetraveller.com/post/source/another-liveinfo-fix/</link><pubDate>Thu, 24 Feb 2005 20:57:01 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/another-liveinfo-fix/</guid><description>Andrew Gregory reported some bugs in Opera 7.54u2. The bug in Opera 7.54u2 turned out to be rather strange. Any opera browser below 7.6 uses an iframe and I check the html within the frame to see if it is loaded. I use the text as that is the root node. In 7.54u2, there is no , only . Strange. Anyway I introduced a check for that and it works okay now.</description></item><item><title>LiveInfo Update</title><link>http://blog.nodetraveller.com/post/source/liveinfo-update/</link><pubDate>Mon, 21 Feb 2005 18:48:55 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/liveinfo-update/</guid><description>Just a minor update release on LiveInfo. Version 1.01 just tidies up some Javascript warnings that sometimes occur.</description></item><item><title>Introducing LiveInfo..</title><link>http://blog.nodetraveller.com/post/source/introducing-liveinfo/</link><pubDate>Mon, 14 Feb 2005 15:46:41 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/introducing-liveinfo/</guid><description>Directly evolved from liveSearch, is a updated version which I&amp;rsquo;m calling liveInfo. As can be seen at chregu&amp;rsquo;s blog LiveSearch displays live search results while a user enters the search text. You&amp;rsquo;ve probably seen Google Suggest which uses the same technology (XMLHTTPRequest).
One of the coolest things about liveSearch is the keyboard navigation where users, when the input field has the focus, the user can navigate through the results using the up and down keys on the keyboard.</description></item><item><title>LiveInfo - How it works</title><link>http://blog.nodetraveller.com/post/source/liveinfo-how-it-works/</link><pubDate>Mon, 14 Feb 2005 15:42:03 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/liveinfo-how-it-works/</guid><description>LiveInfo is directly evolved from Livesearch. If you donâ€™t know what liveSearch is, liveSearch allowed users to search a website while still viewing the current page. The original can be seen here. Wanting to make use of liveSearch for one of my own projects, I proceeded to make some changes from which evolved LiveInfo. LiveInfo is a framework for multiple, real time, skinnable updatable elements within a web page. You can see LiveInfo in action on my blog where there are two LiveInfo elements.</description></item><item><title>Unobstrusive Javascript</title><link>http://blog.nodetraveller.com/post/source/unobstrusive-javascript/</link><pubDate>Sun, 13 Feb 2005 16:30:44 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/unobstrusive-javascript/</guid><description>An excellent article with examples of the correct way to do javascript.</description></item><item><title>Old Stock....</title><link>http://blog.nodetraveller.com/post/source/old-stock/</link><pubDate>Mon, 01 Sep 2003 16:46:32 +0000</pubDate><guid>http://blog.nodetraveller.com/post/source/old-stock/</guid><description>Looking through the cobwebs of my old laptop backups,I (re)discovered my old DHTML newsfeeds mini-app. This app lists all newsfeeds from moreover.com and provides a user interface to view the feeds and store favourite feeds and it does this without reloading the whole pages so it can be a component within a page rather than a page in itself. You can see it here or download here.
It loads the data via javascript though I did have an xml version but that one didn&amp;rsquo;t survive&amp;hellip;In fact I&amp;rsquo;m not sure how much longer moreover.</description></item></channel></rss>